@use "sass:map";
@use "sass:list";
@use "sass:color";

// CORE SETTINGS
// ============================================================

$important: false !default;
$prefix: '' !default;
$delimiter: '-' !default;
$child-delimiter: '__' !default;
$pseudo-delimiter: '\\.' !default;
$screen-delimiter: '\\.' !default;
$variablize: true !default;
$headless: false !default;
$headless-with-root: false !default;
$debugger: false !default; // ! enable with caution !

// INCLUDE SETTINGS
// ============================================================

$include-reset-styles: true !default;
$include-starter-styles: true !default;
$include-button-module: true !default;
$include-form-module: true !default;
$include-table-module: true !default;
$include-wrapper-module: true !default;

// PRIVATE FUNCTIONS
// ============================================================

// PX TO REM FUNCTION
@function rem($size-in-pixel) {
	$remSize: $size-in-pixel / 16;
	@return #{$remSize}rem;
}

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
	$collection: () !default;
	@each $map in $maps {
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}

// DEEP MAP GET FUNCTION
@function get($map, $keys...) {
	@each $key in $keys {
		$map: map.get($map, $key);
	}
	@return $map;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $keyword) {
	$variablized-map: ();
	@each $key, $value in $map {
		$delimiter: if($keyword == '', '', '-');
		$map: (
			$key: var(--#{$keyword}#{$delimiter}#{$key}),
		);
		$variablized-map: merge($variablized-map, $map);
	}

	@return $variablized-map;
}

// VARIABLIZE SCREENS
@function name-screens($screens) {
	$named-screens: ();
	@each $key, $value in $screens {
		$screens: (
			screen-#{$key}: $value,
		);
		$named-screens: merge($named-screens, $screens);
	}
	@return $named-screens;
}

// CORE PSEUDOS
// ============================================================

$core-pseudo-map: (
	first: 'first-child',
	last: 'last-child',
	first-type: 'first-of-type',
	last-type: 'last-of-type',
	odd: 'nth-child(odd)',
	even: 'nth-child(even)',
	hover: 'hover',
	active: 'active',
	visited: 'visited',
	focus: 'focus',
	disabled: 'disabled',
	empty: 'empty',
	focus-within: 'focus-within',
	group-hover: 'group-hover',
	group-focus: 'group-focus',
) !default;

$pseudo-map: () !default;

$all-pseudo-map: merge($core-pseudo-map, $pseudo-map) !default;



// CORE BREAKPOINTS
// ============================================================

$core-screens: (
	sm: 768px,
	md: 1024px,
	lg: 1280px,
	xl: 1536px,
) !default;

$screens: () !default;

$all-screens: merge($core-screens, $screens) !default;

$named-screens: name-screens($all-screens);

@function screen($screen) {
	@if (map.get($all-screens, $screen)) {
		$result: map.get($all-screens, $screen);
		@return $result;
	} @else {
		@error "[#{$screen}] does not exist";
	}
}

@function screens() {
	$result: $all-screens;
	@return $result;
}

@function name-screens() {
	$result: $named-screens;
	@return $result;
}

// CORE FILLS
// ============================================================

$core-colors: (
	red-100: #feefef,
	red-200: #fee0e0,
	red-300: #fdb0b0,
	red-400: #fb7f7f,
	red-500: #fa6060,
	red-600: #e04646,
	red-700: #cf3535,
	red-800: #a72929,
	red-900: #6f1b1b,
	orange-100: #fff2ea,
	orange-200: #fee5d5,
	orange-300: #febd96,
	orange-400: #fd9557,
	orange-500: #fc7b2d,
	orange-600: #e1661b,
	orange-700: #c75919,
	orange-800: #9f4814,
	orange-900: #69300d,
	brown-100: #f8efe7,
	brown-200: #f1ddcf,
	brown-300: #dbac88,
	brown-400: #c67940,
	brown-500: #a75a21,
	brown-600: #8e4c1c,
	brown-700: #7e4319,
	brown-800: #643614,
	brown-900: #43240d,
	yellow-100: #fff7e8,
	yellow-200: #ffefd0,
	yellow-300: #ffd78b,
	yellow-400: #ffbf45,
	yellow-500: #ffaf16,
	yellow-600: #df970d,
	yellow-700: #c4850c,
	yellow-800: #9d6a09,
	yellow-900: #694706,
	lime-100: #f4fae4,
	lime-200: #eaf5c8,
	lime-300: #cae776,
	lime-400: #a8d624,
	lime-500: #8ab900,
	lime-600: #759d00,
	lime-700: #688b00,
	lime-800: #536f00,
	lime-900: #374a00,
	green-100: #e5fae4,
	green-200: #cbf5c8,
	green-300: #7ee675,
	green-400: #32d424,
	green-500: #0fb600,
	green-600: #0d9b00,
	green-700: #0b8900,
	green-800: #096d00,
	green-900: #064900,
	teal-100: #e4fbf6,
	teal-200: #c9f7ec,
	teal-300: #78ebcf,
	teal-400: #26e0b3,
	teal-500: #00c797,
	teal-600: #00a980,
	teal-700: #009571,
	teal-800: #00775b,
	teal-900: #00503c,
	cyan-100: #e5fbfd,
	cyan-200: #caf8fa,
	cyan-300: #7becf4,
	cyan-400: #2be1ed,
	cyan-500: #00d1de,
	cyan-600: #00b2bd,
	cyan-700: #009da7,
	cyan-800: #007d85,
	cyan-900: #005459,
	blue-100: #e6f4ff,
	blue-200: #cce9ff,
	blue-300: #80c9ff,
	blue-400: #33a8ff,
	blue-500: #0092ff,
	blue-600: #007cd9,
	blue-700: #006ebf,
	blue-800: #005899,
	blue-900: #003a66,
	indigo-100: #e6eeff,
	indigo-200: #ccddff,
	indigo-300: #80abff,
	indigo-400: #3379ff,
	indigo-500: #0057ff,
	indigo-600: #004ad9,
	indigo-700: #0041bf,
	indigo-800: #003499,
	indigo-900: #002366,
	blueberry-100: #e8eaf6,
	blueberry-200: #d1d6ed,
	blueberry-300: #8c99d2,
	blueberry-400: #475db5,
	blueberry-500: #2c3f90,
	blueberry-600: #26367a,
	blueberry-700: #212f6c,
	blueberry-800: #1b2656,
	blueberry-900: #121a3a,
	violet-100: #efe6ff,
	violet-200: #dfccff,
	violet-300: #b080ff,
	violet-400: #8133ff,
	violet-500: #6100ff,
	violet-600: #5200d9,
	violet-700: #4900bf,
	violet-800: #3a0099,
	violet-900: #270066,
	purple-100: #f1e4fb,
	purple-200: #e3c9f7,
	purple-300: #bb78eb,
	purple-400: #9226e0,
	purple-500: #7400c7,
	purple-600: #6300a9,
	purple-700: #570095,
	purple-800: #460077,
	purple-900: #2e0050,
	magenta-100: #ffe6ff,
	magenta-200: #feccff,
	magenta-300: #fd80ff,
	magenta-400: #fb33ff,
	magenta-500: #fa00ff,
	magenta-600: #d500d9,
	magenta-700: #bc00bf,
	magenta-800: #960099,
	magenta-900: #640066,
	pink-100: #ffebf2,
	pink-200: #ffd6e5,
	pink-300: #ff99be,
	pink-400: #ff5c96,
	pink-500: #ff337c,
	pink-600: #e42066,
	pink-700: #ca1b5a,
	pink-800: #a21647,
	pink-900: #6c0e30,
	silver-100: #f3f3f5,
	silver-200: #e6e8eb,
	silver-300: #dadce1,
	silver-400: #ced0d7,
	silver-500: #c2c5ce,
	silver-600: #b5b9c4,
	silver-700: #a9adba,
	silver-800: #9da1b0,
	silver-900: #9096a6,
	gray-100: #848a9c,
	gray-200: #747b8f,
	gray-300: #676d80,
	gray-400: #5a5f70,
	gray-500: #4d5260,
	gray-600: #404450,
	gray-700: #333640,
	gray-800: #272930,
	gray-900: #1a1b20,

	tint-100: rgba(255,255,255, .1),
	tint-200: rgba(255,255,255, .2),
	tint-300: rgba(255,255,255, .3),
	tint-400: rgba(255,255,255, .4),
	tint-500: rgba(255,255,255, .5),
	tint-600: rgba(255,255,255, .6),
	tint-700: rgba(255,255,255, .7),
	tint-800: rgba(255,255,255, .8),
	tint-900: rgba(255,255,255, .9),
	shade-100: rgba(0,0,0, .1),
	shade-200: rgba(0,0,0, .2),
	shade-300: rgba(0,0,0, .3),
	shade-400: rgba(0,0,0, .4),
	shade-500: rgba(0,0,0, .5),
	shade-600: rgba(0,0,0, .6),
	shade-700: rgba(0,0,0, .7),
	shade-800: rgba(0,0,0, .8),
	shade-900: rgba(0,0,0, .9),
	black: black,
	white: white,
	transparent: transparent,
) !default;

$colors: () !default;

$core-gradients: () !default;

$gradients: () !default;

$all-colors: merge($core-colors, $colors);
$var-colors: variablize-map($all-colors, '');
$all-gradients: merge($core-gradients, $gradients);
$var-gradients: variablize-map($all-gradients, '');

$fills: merge($core-colors, $core-gradients, $colors, $gradients) !default;
$var-fills: variablize-map($fills, '');

@function color($color) {
	@if (map.get($all-colors, $color)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-colors, $color);
		} @else {
			$result: map.get($all-colors, $color);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--#{$color});
			@return $result;
		} @else {
			@error "[#{$color}] does not exist";
		}
	}
}

@function colors() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-colors;
	} @else {
		$result: $all-colors;
	}
	@return $result;
}

@function gradient($gradient) {
	@if (map.get($all-gradients, $gradient)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-gradients, $gradient);
		} @else {
			$result: map.get($all-gradients, $gradient);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--#{$gradient});
			@return $result;
		} @else {
			@error "[#{$gradient}] does not exist";
		}
	}
}

@function gradients() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-gradients;
	} @else {
		$result: $all-gradients;
	}
	@return $result;
}

@function fill($fill) {
	@if (map.get($fills, $fill)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-fills, $fill);
		} @else {
			$result: map.get($fills, $fill);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--#{$fill});
			@return $result;
		} @else {
			@error "[#{$fill}] does not exist";
		}
	}
}

@function fills() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-fills;
	} @else {
		$result: $fills;
	}
	@return $result;
}



// CORE SCALES
// ============================================================

$core-positive-sizes: (
	0: 0,
	1: rem(4),
	2: rem(8),
	3: rem(12),
	4: rem(16),
	5: rem(20),
	6: rem(24),
	7: rem(28),
	8: rem(32),
	9: rem(36),
	10: rem(40),
	11: rem(44),
	12: rem(48),

	13: rem(56),
	14: rem(64),
	15: rem(72),
	16: rem(80),
	17: rem(88),
	18: rem(96),

	19: rem(128),
	20: rem(160),
	21: rem(192),

	22: rem(256),
	23: rem(320),
	24: rem(384),

	25: rem(512),
	26: rem(640),
	27: rem(768),

	28: rem(1024),
	29: rem(1280),
	30: rem(1536),
) !default;

$positive-sizes: () !default;

$core-negative-sizes: (
	n1: rem(-4),
	n2: rem(-8),
	n3: rem(-12),
	n4: rem(-16),
	n5: rem(-20),
	n6: rem(-24),
	n7: rem(-28),
	n8: rem(-32),
	n9: rem(-36),
	n10: rem(-40),
	n11: rem(-44),
	n12: rem(-48),

	n13: rem(-56),
	n14: rem(-64),
	n15: rem(-72),
	n16: rem(-80),
	n17: rem(-88),
	n18: rem(-96),

	n19: rem(-128),
	n20: rem(-160),
	n21: rem(-192),

	n22: rem(-256),
	n23: rem(-320),
	n24: rem(-384),

	n25: rem(-512),
	n26: rem(-640),
	n27: rem(-768),

	n28: rem(-1024),
	n29: rem(-1280),
	n30: rem(-1536),
) !default;

$negative-sizes: () !default;

$all-positive-sizes: merge($core-positive-sizes, $positive-sizes);
$var-positive-sizes: variablize-map($all-positive-sizes, 'size');

$all-negative-sizes: merge($core-negative-sizes, $negative-sizes);
$var-negative-sizes: variablize-map($all-negative-sizes, 'size');

$all-sizes: merge($core-positive-sizes, $core-negative-sizes, $positive-sizes, $negative-sizes);
$var-all-sizes: variablize-map($all-sizes, 'size');

@function positive-size($positive-size) {
	@if (map.get($all-positive-sizes, $positive-size)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-positive-sizes, $positive-size);
		} @else {
			$result: map.get($all-positive-sizes, $positive-size);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--size-#{$positive-size});
			@return $result;
		} @else {
			@error "[#{$positive-size}] does not exist";
		}
	}
}

@function positive-sizes() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-positive-sizes;
	} @else {
		$result: $all-positive-sizes;
	}
	@return $result;
}

@function negative-size($negative-size) {
	@if (map.get($all-negative-sizes, $negative-size)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-negative-sizes, $negative-size);
		} @else {
			$result: map.get($all-negative-sizes, $negative-size);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--size-#{$negative-size});
			@return $result;
		} @else {
			@error "[#{$negative-size}] does not exist";
		}
	}
}

@function negative-sizes() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-negative-sizes;
	} @else {
		$result: $all-negative-sizes;
	}
	@return $result;
}

@function size($size, $sizes...) {
	$result: ();
	@if (map.has-key($all-sizes, $size)) {
		@if ($variablize == true) {
			$result: map.get($var-all-sizes, $size);
		} @else {
			$result: map.get($all-sizes, $size);
		}
	} @else {
		$result: list.append($result, $size);
	}
	@each $size in $sizes {
		$value: '';
		@if (map.has-key($all-sizes, $size)) {
			@if ($variablize == true) {
				$value: map.get($var-all-sizes, $size);
			} @else {
				$value: map.get($all-sizes, $size);
			}
			$result: list.append($result, $value);
		} @else {
			$result: list.append($result, $size);
		}
	}
	@return $result;
}

@function sizes() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-all-sizes;
	} @else {
		$result: $all-sizes;
	}
	@return $result;
}



// BOX SHADOWS
// ============================================================

$core-shadows: (
	1: (
		0 1px 3px rgba(0, 0, 0, 0.12),
		0 1px 2px rgba(0, 0, 0, 0.24),
	),
	2: (
		0 3px 6px rgba(0, 0, 0, 0.16),
		0 3px 6px rgba(0, 0, 0, 0.23),
	),
	3: (
		0 10px 20px rgba(0, 0, 0, 0.19),
		0 6px 6px rgba(0, 0, 0, 0.23),
	),
	4: (
		0 14px 28px rgba(0, 0, 0, 0.25),
		0 10px 10px rgba(0, 0, 0, 0.22),
	),
	5: (
		0 19px 38px rgba(0, 0, 0, 0.3),
		0 15px 12px rgba(0, 0, 0, 0.22),
	),
) !default;

$shadows: () !default;

$all-shadows: merge($core-shadows, $shadows);
$var-shadows: variablize-map($all-shadows, 'shadow');

@function shadow($shadow) {
	@if (map.get($all-shadows, $shadow)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-shadows, $shadow);
		} @else {
			$result: map.get($all-shadows, $shadow);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--shadow-#{$shadow});
			@return $result;
		} @else {
			@error "[#{$shadow}] does not exist";
		}
	}
}

@function shadows() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-shadows;
	} @else {
		$result: $all-shadows;
	}
	@return $result;
}



// TYPOGRAPHY API
// ============================================================

$core-font-families: (
	sans: (
		sans-serif,
	),
	serif: (
		serif,
	),
	mono: (
		monospace,
	),
) !default;

$font-families: () !default;

$core-font-sizes: (
	10xl: rem(72),
	9xl: rem(64),
	8xl: rem(56),
	7xl: rem(48),

	6xl: rem(40),
	5xl: rem(36),
	4xl: rem(32),
	3xl: rem(28),
	2xl: rem(24),

	xl: rem(20),
	lg: rem(18),
	md: rem(16),
	sm: rem(14),
	xs: rem(12),
	2xs: rem(10),
) !default;

$font-sizes: () !default;

$core-leadings: (
	1: 1,
	2: 1.125,
	3: 1.25,
	4: 1.375,
	5: 1.5,
	6: 1.625,
	7: 1.75,
	8: 1.875,
	9: 2,
	10: 2.125,
	11: 2.25,
	12: 2.375,
	13: 2.5,
) !default;

$leadings: () !default;

$core-trackings: (
	n3: -0.075em,
	n2: -0.05em,
	n1: -0.025em,
	0: 0,
	1: 0.025em,
	2: 0.05em,
	3: 0.075em,
) !default;

$trackings: () !default;

$all-font-families: merge($core-font-families, $font-families);
$var-font-families: variablize-map($all-font-families, 'font');
$all-font-sizes: merge($core-font-sizes, $font-sizes);
$var-font-sizes: variablize-map($all-font-sizes, 'font');
$all-leadings: merge($core-leadings, $leadings);
$var-leadings: variablize-map($all-leadings, 'leading');
$all-trackings: merge($core-trackings, $trackings);
$var-trackings: variablize-map($all-trackings, 'tracking');

@function font-family($font-family) {
	@if (map.get($all-font-families, $font-family)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-font-families, $font-family);
		} @else {
			$result: map.get($all-font-families, $font-family);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--font-family-#{$font-family});
			@return $result;
		} @else {
			@error "[#{$font-family}] does not exist";
		}
	}
}

@function font-families() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-font-families;
	} @else {
		$result: $all-font-families;
	}
	@return $result;
}

@function font-size($font-size) {
	@if (map.get($all-font-sizes, $font-size)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-font-sizes, $font-size);
		} @else {
			$result: map.get($all-font-sizes, $font-size);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--font-size-#{$font-size});
			@return $result;
		} @else {
			@error "[#{$font-size}] does not exist";
		}
	}
}

@function font-sizes() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-font-sizes;
	} @else {
		$result: $all-font-sizes;
	}
	@return $result;
}

@function leading($leading) {
	@if (map.get($all-leadings, $leading)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-leadings, $leading);
		} @else {
			$result: map.get($all-leadings, $leading);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--leading-#{$leading});
			@return $result;
		} @else {
			@error "[#{$leading}] does not exist";
		}
	}
}

@function leadings() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-leadings;
	} @else {
		$result: $all-leadings;
	}
	@return $result;
}

@function tracking($tracking) {
	@if (map.get($all-trackings, $tracking)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-trackings, $tracking);
		} @else {
			$result: map.get($all-trackings, $tracking);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--tracking-#{$tracking});
			@return $result;
		} @else {
			@error "[#{$tracking}] does not exist";
		}
	}
}

@function trackings() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-trackings;
	} @else {
		$result: $all-trackings;
	}
	@return $result;
}



// CORE BORDER RADIUSES
// ============================================================

$core-radiuses: (
	xs: rem(4),
	sm: rem(8),
	md: rem(12),
	lg: rem(16),
	xl: rem(20),
	round: 9999px,
) !default;

$radiuses: () !default;
$all-radiuses: merge($core-radiuses, $radiuses);
$var-radiuses: variablize-map($all-radiuses, 'radius');

@function radius($radius) {
	@if (map.get($all-radiuses, $radius)) {
		$result: ();
		@if ($variablize == true) {
			$result: map.get($var-radiuses, $radius);
		} @else {
			$result: map.get($all-radiuses, $radius);
		}
		@return $result;
	} @else {
		@if ($headless == true) {
			$result: var(--radius-#{$radius});
			@return $result;
		} @else {
			@error "[#{$radius}] does not exist";
		}
	}
}

@function radiuses() {
	$result: ();
	@if ($variablize == true) {
		$result: $var-radiuses;
	} @else {
		$result: $all-radiuses;
	}
	@return $result;
}



// ROOT VARIABLES
// ============================================================

// Create root variables if CSS custom property setting is enabled
@if ($variablize == true) {
	@if ($headless == false) {

		:root {
			@each $key, $value in $fills {
				--#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-sizes {
				--size-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-shadows {
				--shadow-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-font-families {
				--font-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-font-sizes {
				--font-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-leadings {
				--leading-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-trackings {
				--tracking-#{'' + $key}: #{$value};
			}
			@each $key, $value in $all-radiuses {
				--radius-#{'' + $key}: #{$value};
			}
		}

	} @else if ($headless == true) {
		
		@if ($headless-with-root == true) {

			:root {
				@each $key, $value in $fills {
					--#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-sizes {
					--size-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-shadows {
					--shadow-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-font-families {
					--font-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-font-sizes {
					--font-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-leadings {
					--leading-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-trackings {
					--tracking-#{'' + $key}: #{$value};
				}
				@each $key, $value in $all-radiuses {
					--radius-#{'' + $key}: #{$value};
				}
			}

		} @else {

		}
	}
}



// CONSTRUCTOR
// ============================================================

@mixin constructor($keyword, $responsive, $responsive-pseudos, $properties, $final-variants, $pseudos) {
	@if ($headless == false) {
		@if ($debugger == true) {
			// Create basic classes
			@if $keyword == 'exempt' {
				@each $variant, $variant-value in $final-variants {
					.#{$prefix}#{'' + $variant} {
						@each $property in $properties {
							#{$property}: $variant-value if($important == true, !important, null);
						}
					}
				}
			} @else {
				@each $variant, $variant-value in $final-variants {
					@if $variant == 'exempt' {
						.#{$prefix}#{$keyword} {
							@each $property in $properties {
								#{$property}: $variant-value if($important == true, !important, null);
							}
						}
					} @else {
						.#{$prefix}#{$keyword} {
							&#{$delimiter}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						}
					}
				}
			}
	
			// Create basic pseudo classes
			@each $pseudo, $pseudo-value in $all-pseudo-map {
				@if $keyword == 'exempt' {
					@each $variant, $variant-value in $final-variants {
						@if $pseudo == group-hover {
							.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						} @else if $pseudo == group-focus {
							.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						} @else {
							.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								&:#{map.get($all-pseudo-map, $pseudo)} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							}
						}
					}
				} @else {
					@each $variant, $variant-value in $final-variants {
						@if $variant == 'exempt' {
							@if $pseudo == group-hover {
								.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else if $pseudo == group-focus {
								.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else {
								.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&:#{$pseudo-value} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							}
						} @else {
							@if $pseudo == group-hover {
								.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							} @else if $pseudo == group-focus {
								.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							} @else {
								.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										&:#{$pseudo-value} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								}
							}
						}
					}
				}
			}
	
			// Create responsive classes
			@each $screen, $screen-value in $all-screens {
				@media (min-width: $screen-value) {
					// Create basic classes
					@if $keyword == 'exempt' {
						@each $variant, $variant-value in $final-variants {
							.#{$screen}#{$screen-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						}
					} @else {
						@each $variant, $variant-value in $final-variants {
							@if $variant == 'exempt' {
								.#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else {
								.#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							}
						}
					}
	
					// Create basic pseudo classes
					@each $pseudo, $pseudo-value in $all-pseudo-map {
						@if $keyword == 'exempt' {
							// Basic variant in the screen context without keyword
							@each $variant, $variant-value in $final-variants {
								@if $pseudo == group-hover {
									.group:hover
										.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								} @else if $pseudo == group-focus {
									.group:focus
										.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								} @else {
									.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
										&:#{map.get($all-pseudo-map, $pseudo)} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								}
							}
						} @else {
							// Pseudo variant loop in the screen context
							@each $variant, $variant-value in $final-variants {
								@if $variant == 'exempt' {
									@if $pseudo == group-hover {
										.group:hover
											.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									} @else if $pseudo == group-focus {
										.group:focus
											.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									} @else {
										.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											&:#{$pseudo-value} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										}
									}
								} @else {
									@if $pseudo == group-hover {
										.group:hover
											.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											&#{$delimiter}#{'' + $variant} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										}
									} @else if $pseudo == group-focus {
										.group:focus
											.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											&#{$delimiter}#{'' + $variant} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										}
									} @else {
										.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
											&#{$delimiter}#{'' + $variant} {
												&:#{$pseudo-value} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} @else {
			// Create basic classes
			@if $keyword == 'exempt' {
				@each $variant, $variant-value in $final-variants {
					.#{$prefix}#{'' + $variant} {
						@each $property in $properties {
							#{$property}: $variant-value if($important == true, !important, null);
						}
					}
				}
			} @else {
				@each $variant, $variant-value in $final-variants {
					@if $variant == 'exempt' {
						.#{$prefix}#{$keyword} {
							@each $property in $properties {
								#{$property}: $variant-value if($important == true, !important, null);
							}
						}
					} @else {
						.#{$prefix}#{$keyword} {
							&#{$delimiter}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						}
					}
				}
			}
	
			// Create basic pseudo classes
			@each $pseudo in $pseudos {
				@if map.has-key($all-pseudo-map, $pseudo) {
					@if $keyword == 'exempt' {
						@each $variant, $variant-value in $final-variants {
							@if $pseudo == group-hover {
								.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else if $pseudo == group-focus {
								.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else {
								.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
									&:#{map.get($all-pseudo-map, $pseudo)} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							}
						}
					} @else {
						@each $variant, $variant-value in $final-variants {
							@if $variant == 'exempt' {
								@if $pseudo == group-hover {
									.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								} @else if $pseudo == group-focus {
									.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								} @else {
									.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										&:#{map.get($all-pseudo-map, $pseudo)} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								}
							} @else {
								@if $pseudo == group-hover {
									.group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										&#{$delimiter}#{'' + $variant} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								} @else if $pseudo == group-focus {
									.group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										&#{$delimiter}#{'' + $variant} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								} @else {
									.#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
										&#{$delimiter}#{'' + $variant} {
											&:#{map.get($all-pseudo-map, $pseudo)} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
	
			// Create responsive classes
			@if $responsive == true {
				@each $screen, $screen-value in $all-screens {
					@media (min-width: $screen-value) {
						// Create basic classes
						@if $keyword == 'exempt' {
							@each $variant, $variant-value in $final-variants {
								.#{$screen}#{$screen-delimiter}#{$prefix}#{'' + $variant} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							}
						} @else {
							@each $variant, $variant-value in $final-variants {
								@if $variant == 'exempt' {
									.#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								} @else {
									.#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
										&#{$delimiter}#{'' + $variant} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								}
							}
						}
	
						@if $responsive-pseudos == true {
							// Create basic pseudo classes
							@each $pseudo in $pseudos {
								@if map.has-key($all-pseudo-map, $pseudo) {
									@if $keyword == 'exempt' {
										// Basic variant in the screen context without keyword
										@each $variant, $variant-value in $final-variants {
											@if $pseudo == group-hover {
												.group:hover
													.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
													+ $variant} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											} @else if $pseudo == group-focus {
												.group:focus
													.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
													+ $variant} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											} @else {
												.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
													+ $variant} {
													&:#{map.get($all-pseudo-map, $pseudo)} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												}
											}
										}
									} @else {
										// Pseudo variant loop in the screen context
										@each $variant, $variant-value in $final-variants {
											@if $variant == 'exempt' {
												@if $pseudo == group-hover {
													.group:hover
														.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												} @else if $pseudo == group-focus {
													.group:focus
														.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												} @else {
													.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														&:#{map.get($all-pseudo-map, $pseudo)} {
															@each $property in $properties {
																#{$property}: $variant-value if($important == true, !important, null);
															}
														}
													}
												}
											} @else {
												@if $pseudo == group-hover {
													.group:hover
														.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														&#{$delimiter}#{'' + $variant} {
															@each $property in $properties {
																#{$property}: $variant-value if($important == true, !important, null);
															}
														}
													}
												} @else if $pseudo == group-focus {
													.group:hover
														.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														&#{$delimiter}#{'' + $variant} {
															@each $property in $properties {
																#{$property}: $variant-value if($important == true, !important, null);
															}
														}
													}
												} @else {
													.#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
														&#{$delimiter}#{'' + $variant} {
															&:#{map.get($all-pseudo-map, $pseudo)} {
																@each $property in $properties {
																	#{$property}: $variant-value
																		if($important == true, !important, null);
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	} @else {
		// Create basic classes
		@if $keyword == 'exempt' {
			@each $variant, $variant-value in $final-variants {
				%#{$prefix}#{'' + $variant} {
					@each $property in $properties {
						#{$property}: $variant-value if($important == true, !important, null);
					}
				}
			}
		} @else {
			@each $variant, $variant-value in $final-variants {
				@if $variant == 'exempt' {
					%#{$prefix}#{$keyword} {
						@each $property in $properties {
							#{$property}: $variant-value if($important == true, !important, null);
						}
					}
				} @else {
					%#{$prefix}#{$keyword} {
						&#{$delimiter}#{'' + $variant} {
							@each $property in $properties {
								#{$property}: $variant-value if($important == true, !important, null);
							}
						}
					}
				}
			}
		}

		// Create basic pseudo classes
		@each $pseudo in $pseudos {
			@if map.has-key($all-pseudo-map, $pseudo) {
				@if $keyword == 'exempt' {
					@each $variant, $variant-value in $final-variants {
						@if $pseudo == group-hover {
							.group:hover %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						} @else if $pseudo == group-focus {
							.group:focus %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						} @else {
							%#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
								&:#{map.get($all-pseudo-map, $pseudo)} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							}
						}
					}
				} @else {
					@each $variant, $variant-value in $final-variants {
						@if $variant == 'exempt' {
							@if $pseudo == group-hover {
								.group:hover %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else if $pseudo == group-focus {
								.group:focus %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else {
								%#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&:#{map.get($all-pseudo-map, $pseudo)} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							}
						} @else {
							@if $pseudo == group-hover {
								.group:hover %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							} @else if $pseudo == group-focus {
								.group:focus %#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							} @else {
								%#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										&:#{map.get($all-pseudo-map, $pseudo)} {
											@each $property in $properties {
												#{$property}: $variant-value if($important == true, !important, null);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		// Create responsive classes
		@if $responsive == true {
			@each $screen, $screen-value in $all-screens {
				@media (min-width: $screen-value) {
					// Create basic classes
					@if $keyword == 'exempt' {
						@each $variant, $variant-value in $final-variants {
							%#{$screen}#{$screen-delimiter}#{$prefix}#{'' + $variant} {
								@each $property in $properties {
									#{$property}: $variant-value if($important == true, !important, null);
								}
							}
						}
					} @else {
						@each $variant, $variant-value in $final-variants {
							@if $variant == 'exempt' {
								%#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
									@each $property in $properties {
										#{$property}: $variant-value if($important == true, !important, null);
									}
								}
							} @else {
								%#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
									&#{$delimiter}#{'' + $variant} {
										@each $property in $properties {
											#{$property}: $variant-value if($important == true, !important, null);
										}
									}
								}
							}
						}
					}

					@if $responsive-pseudos == true {
						// Create basic pseudo classes
						@each $pseudo in $pseudos {
							@if map.has-key($all-pseudo-map, $pseudo) {
								@if $keyword == 'exempt' {
									// Basic variant in the screen context without keyword
									@each $variant, $variant-value in $final-variants {
										@if $pseudo == group-hover {
											.group:hover
												%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
												+ $variant} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										} @else if $pseudo == group-focus {
											.group:focus
												%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
												+ $variant} {
												@each $property in $properties {
													#{$property}: $variant-value if($important == true, !important, null);
												}
											}
										} @else {
											%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
												+ $variant} {
												&:#{map.get($all-pseudo-map, $pseudo)} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											}
										}
									}
								} @else {
									// Pseudo variant loop in the screen context
									@each $variant, $variant-value in $final-variants {
										@if $variant == 'exempt' {
											@if $pseudo == group-hover {
												.group:hover
													%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											} @else if $pseudo == group-focus {
												.group:focus
													%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													@each $property in $properties {
														#{$property}: $variant-value if($important == true, !important, null);
													}
												}
											} @else {
												%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													&:#{map.get($all-pseudo-map, $pseudo)} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												}
											}
										} @else {
											@if $pseudo == group-hover {
												.group:hover
													%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													&#{$delimiter}#{'' + $variant} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												}
											} @else if $pseudo == group-focus {
												.group:hover
													%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													&#{$delimiter}#{'' + $variant} {
														@each $property in $properties {
															#{$property}: $variant-value if($important == true, !important, null);
														}
													}
												}
											} @else {
												%#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
													&#{$delimiter}#{'' + $variant} {
														&:#{map.get($all-pseudo-map, $pseudo)} {
															@each $property in $properties {
																#{$property}: $variant-value
																	if($important == true, !important, null);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
