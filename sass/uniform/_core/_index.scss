@use "sass:map";
@use "sass:list";
@use "sass:color";

// CORE SETTINGS
// ============================================================

$important: false !default;
$prefix: '' !default;
$delimiter: '-' !default;
$child-delimiter: '__' !default;
$pseudo-delimiter: '\\.' !default;
$screen-delimiter: '\\.' !default;
$variablize: true !default;
$headless: false !default;
$headless-with-root: false !default;
$debugger: false !default; // ! enable with caution !

// INCLUDE SETTINGS
// ============================================================

$include-reset-styles: true !default;
$include-starter-styles: true !default;
$include-button-module: true !default;
$include-form-module: true !default;
$include-table-module: true !default;
$include-wrapper-module: true !default;

// PRIVATE FUNCTIONS
// ============================================================

// PX TO REM FUNCTION
@function rem($size-in-pixel) {
  $remSize: $size-in-pixel / 16;
  @return #{$remSize}rem;
}

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
  $collection: () !default;
  @each $map in $maps {
    $collection: map-merge($collection, $map);
  }
  @return $collection;
}

// DEEP MAP GET FUNCTION
@function get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $keyword) {
  $variablized-map: ();
  @each $key, $value in $map {
    $delimiter: if($keyword == '', '', '-');
    $map: (
      $key: var(--#{$keyword}#{$delimiter}#{$key}),
    );
    $variablized-map: merge($variablized-map, $map);
  }

  @return $variablized-map;
}

// VARIABLIZE SCREENS
@function name-screens($screens) {
  $named-screens: ();
  @each $key, $value in $screens {
    $screens: (
      screen-#{$key}: $value,
    );
    $named-screens: merge($named-screens, $screens);
  }
  @return $named-screens;
}

// CORE PSEUDOS
// ============================================================

$core-pseudo-map: (
  first: 'first-child',
  last: 'last-child',
  first-type: 'first-of-type',
  last-type: 'last-of-type',
  odd: 'nth-child(odd)',
  even: 'nth-child(even)',
  hover: 'hover',
  active: 'active',
  visited: 'visited',
  focus: 'focus',
  disabled: 'disabled',
  empty: 'empty',
  focus-within: 'focus-within',
  group-hover: 'group-hover',
  group-focus: 'group-focus',
) !default;

$pseudo-map: () !default;

$all-pseudo-map: merge($core-pseudo-map, $pseudo-map) !default;



// CORE BREAKPOINTS
// ============================================================

$core-screens: (
  xs: 896px,
  sm: 1024px,
  md: 1152px,
  lg: 1280px,
  xl: 1536px,
) !default;

$screens: () !default;

$all-screens: merge($core-screens, $screens) !default;

$named-screens: name-screens($all-screens);

@function screen($screen) {
  @if (map.get($all-screens, $screen)) {
    $result: map.get($all-screens, $screen);
    @return $result;
  } @else {
    @error "[#{$screen}] does not exist";
  }
}

@function screens() {
  $result: $all-screens;
  @return $result;
}

@function name-screens() {
  $result: $named-screens;
  @return $result;
}

// CORE FILLS
// ============================================================

$core-colors: (
  red-100: #feefef,
  red-200: #fee0e0,
  red-300: #fdbfbf,
  red-400: #fb7f7f,
  red-500: #fc5f5f,
  red-600: #ec4b4b,
  red-700: #ca2929,
  red-800: #901d1d,
  red-900: #561111,
  orange-100: #fff2ea,
  orange-200: #fee5d5,
  orange-300: #fecaaa,
  orange-400: #fd9557,
  orange-500: #fd7b2c,
  orange-600: #ee6c1d,
  orange-700: #bd5313,
  orange-800: #873c0e,
  orange-900: #512408,
  brown-100: #f8efe7,
  brown-200: #f1ddcf,
  brown-300: #e2bca0,
  brown-400: #c67940,
  brown-500: #b15818,
  brown-600: #9b5119,
  brown-700: #783e14,
  brown-800: #572c0e,
  brown-900: #341b08,
  yellow-100: #fffbf3,
  yellow-200: #fff3dc,
  yellow-300: #ffdfa2,
  yellow-400: #ffbf45,
  yellow-500: #ffaf16,
  yellow-600: #e1970b,
  yellow-700: #ac7408,
  yellow-800: #845907,
  yellow-900: #503604,
  lime-100: #f4fae4,
  lime-200: #eaf5c8,
  lime-300: #d4eb91,
  lime-400: #a8d624,
  lime-500: #8ab900,
  lime-600: #7ca700,
  lime-700: #618200,
  lime-800: #455d00,
  lime-900: #293800,
  green-100: #e5fae4,
  green-200: #cbf5c8,
  green-300: #98eb90,
  green-400: #32d424,
  green-500: #0fb600,
  green-600: #0ea400,
  green-700: #0b7f00,
  green-800: #085b00,
  green-900: #053700,
  teal-100: #e4fbf6,
  teal-200: #c9f7ec,
  teal-300: #92f0d8,
  teal-400: #26e0b3,
  teal-500: #00c797,
  teal-600: #00b388,
  teal-700: #008b6a,
  teal-800: #00644c,
  teal-900: #003c2d,
  cyan-100: #e5fbfd,
  cyan-200: #caf8fa,
  cyan-300: #95f0f6,
  cyan-400: #2be1ed,
  cyan-500: #00d1de,
  cyan-600: #00bcc8,
  cyan-700: #00929b,
  cyan-800: #00696f,
  cyan-900: #003f43,
  blue-100: #e6f4ff,
  blue-200: #cce9ff,
  blue-300: #99d3ff,
  blue-400: #33a8ff,
  blue-500: #0092ff,
  blue-600: #0083e6,
  blue-700: #0066b3,
  blue-800: #004980,
  blue-900: #002c4d,
  indigo-100: #e6eeff,
  indigo-200: #ccddff,
  indigo-300: #99bcff,
  indigo-400: #3379ff,
  indigo-500: #0057ff,
  indigo-600: #004ee6,
  indigo-700: #003db3,
  indigo-800: #002c80,
  indigo-900: #001a4d,
  blueberry-100: #e8eaf6,
  blueberry-200: #d1d6ed,
  blueberry-300: #a2aedb,
  blueberry-400: #475db5,
  blueberry-500: #20389d,
  blueberry-600: #223688,
  blueberry-700: #1a2b6a,
  blueberry-800: #131e4c,
  blueberry-900: #0b132e,
  violet-100: #efe6ff,
  violet-200: #dfccff,
  violet-300: #c099ff,
  violet-400: #8133ff,
  violet-500: #6100ff,
  violet-600: #5700e6,
  violet-700: #4400b3,
  violet-800: #310080,
  violet-900: #1d004d,
  purple-100: #f8f1fd,
  purple-200: #ead7f9,
  purple-300: #c892f0,
  purple-400: #9226e0,
  purple-500: #7400c7,
  purple-600: #6300a9,
  purple-700: #4b0081,
  purple-800: #3a0064,
  purple-900: #23003c,
  magenta-100: #ffe6ff,
  magenta-200: #feccff,
  magenta-300: #fd99ff,
  magenta-400: #fb33ff,
  magenta-500: #fa00ff,
  magenta-600: #e100e6,
  magenta-700: #af00b3,
  magenta-800: #7d0080,
  magenta-900: #4b004d,
  pink-100: #ffebf2,
  pink-200: #ffd6e5,
  pink-300: #ffadcb,
  pink-400: #ff5c96,
  pink-500: #ff337c,
  pink-600: #f0246d,
  pink-700: #c11653,
  pink-800: #8a103b,
  pink-900: #530923,
  silver-100: #f7f7f9,
  silver-200: #eeeff3,
  silver-300: #e6e8ec,
  silver-400: #dee0e6,
  silver-500: #d6d8e0,
  silver-600: #cdd0da,
  silver-700: #c5c8d4,
  silver-800: #bdc1cd,
  silver-900: #b4b9c7,
  gray-100: #c6c8d0,
  gray-200: #b0b3be,
  gray-300: #999dab,
  gray-400: #838899,
  gray-500: #6e7386,
  gray-600: #5c606f,
  gray-700: #494d59,
  gray-800: #373943,
  gray-900: #25262d,
  tint-100: rgba(255,255,255, .1),
  tint-200: rgba(255,255,255, .2),
  tint-300: rgba(255,255,255, .3),
  tint-400: rgba(255,255,255, .4),
  tint-500: rgba(255,255,255, .5),
  tint-600: rgba(255,255,255, .6),
  tint-700: rgba(255,255,255, .7),
  tint-800: rgba(255,255,255, .8),
  tint-900: rgba(255,255,255, .9),
  shade-100: rgba(0,0,0, .1),
  shade-200: rgba(0,0,0, .2),
  shade-300: rgba(0,0,0, .3),
  shade-400: rgba(0,0,0, .4),
  shade-500: rgba(0,0,0, .5),
  shade-600: rgba(0,0,0, .6),
  shade-700: rgba(0,0,0, .7),
  shade-800: rgba(0,0,0, .8),
  shade-900: rgba(0,0,0, .9),
  black: black,
  white: white,
  transparent: transparent,
) !default;

$colors: () !default;

$core-gradients: () !default;

$gradients: () !default;

$all-colors: merge($core-colors, $colors);
$var-colors: variablize-map($all-colors, '');
$all-gradients: merge($core-gradients, $gradients);
$var-gradients: variablize-map($all-gradients, '');

$fills: merge($core-colors, $core-gradients, $colors, $gradients) !default;
$var-fills: variablize-map($fills, '');

@function color($color) {
  @if (map.get($all-colors, $color)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-colors, $color);
    } @else {
      $result: map.get($all-colors, $color);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--#{$color});
      @return $result;
    } @else {
      @error "[#{$color}] does not exist";
    }
  }
}

@function colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-colors;
  } @else {
    $result: $all-colors;
  }
  @return $result;
}

@function gradient($gradient) {
  @if (map.get($all-gradients, $gradient)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-gradients, $gradient);
    } @else {
      $result: map.get($all-gradients, $gradient);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--#{$gradient});
      @return $result;
    } @else {
      @error "[#{$gradient}] does not exist";
    }
  }
}

@function gradients() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-gradients;
  } @else {
    $result: $all-gradients;
  }
  @return $result;
}

@function fill($fill) {
  @if (map.get($fills, $fill)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-fills, $fill);
    } @else {
      $result: map.get($fills, $fill);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--#{$fill});
      @return $result;
    } @else {
      @error "[#{$fill}] does not exist";
    }
  }
}

@function fills() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-fills;
  } @else {
    $result: $fills;
  }
  @return $result;
}



// CORE SCALES
// ============================================================

$core-positive-sizes: (
  0: 0,

  1: rem(4),
  2: rem(8),
  3: rem(12),
  4: rem(16),
  5: rem(20),
  6: rem(24),
  7: rem(28),
  8: rem(32),
  9: rem(36),
  10: rem(40),
  11: rem(44),
  12: rem(48),

  13: rem(56),
  14: rem(64),
  15: rem(72),
  16: rem(80),
  17: rem(88),
  18: rem(96),

  19: rem(128),
  20: rem(160),
  21: rem(192),

  22: rem(256),
  23: rem(320),
  24: rem(384),

  25: rem(512),
  26: rem(640),
  27: rem(768),
) !default;

$positive-sizes: () !default;

$core-negative-sizes: (
  n1: rem(-4),
  n2: rem(-8),
  n3: rem(-12),
  n4: rem(-16),
  n5: rem(-20),
  n6: rem(-24),
  n7: rem(-28),
  n8: rem(-32),
  n9: rem(-36),
  n10: rem(-40),
  n11: rem(-44),
  n12: rem(-48),

  n13: rem(-56),
  n14: rem(-64),
  n15: rem(-72),
  n16: rem(-80),
  n17: rem(-88),
  n18: rem(-96),

  n19: rem(-128),
  n20: rem(-160),
  n21: rem(-192),

  n22: rem(-256),
  n23: rem(-320),
  n24: rem(-384),

  n25: rem(-512),
  n26: rem(-640),
  n27: rem(-768),
) !default;

$negative-sizes: () !default;

$all-positive-sizes: merge($core-positive-sizes, $positive-sizes);
$var-positive-sizes: variablize-map($all-positive-sizes, 'size');

$all-negative-sizes: merge($core-negative-sizes, $negative-sizes);
$var-negative-sizes: variablize-map($all-negative-sizes, 'size');

$all-sizes: merge($core-positive-sizes, $core-negative-sizes, $positive-sizes, $negative-sizes);
$var-all-sizes: variablize-map($all-sizes, 'size');

@function positive-size($positive-size) {
  @if (map.get($all-positive-sizes, $positive-size)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-positive-sizes, $positive-size);
    } @else {
      $result: map.get($all-positive-sizes, $positive-size);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--size-#{$positive-size});
      @return $result;
    } @else {
      @error "[#{$positive-size}] does not exist";
    }
  }
}

@function positive-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-positive-sizes;
  } @else {
    $result: $all-positive-sizes;
  }
  @return $result;
}

@function negative-size($negative-size) {
  @if (map.get($all-negative-sizes, $negative-size)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-negative-sizes, $negative-size);
    } @else {
      $result: map.get($all-negative-sizes, $negative-size);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--size-#{$negative-size});
      @return $result;
    } @else {
      @error "[#{$negative-size}] does not exist";
    }
  }
}

@function negative-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-negative-sizes;
  } @else {
    $result: $all-negative-sizes;
  }
  @return $result;
}

@function size($size, $sizes...) {
  $result: ();
  @if (map.has-key($all-sizes, $size)) {
    @if ($variablize == true) {
      $result: map.get($var-all-sizes, $size);
    } @else {
      $result: map.get($all-sizes, $size);
    }
  } @else {
    $result: list.append($result, $size);
  }
  @each $size in $sizes {
    $value: '';
    @if (map.has-key($all-sizes, $size)) {
      @if ($variablize == true) {
        $value: map.get($var-all-sizes, $size);
      } @else {
        $value: map.get($all-sizes, $size);
      }
      $result: list.append($result, $value);
    } @else {
      $result: list.append($result, $size);
    }
  }
  @return $result;
}

@function sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-all-sizes;
  } @else {
    $result: $all-sizes;
  }
  @return $result;
}



// BOX SHADOWS
// ============================================================

$core-shadows: (
  1: (
    0 1px 3px rgba(0, 0, 0, 0.12),
    0 1px 2px rgba(0, 0, 0, 0.24),
  ),
  2: (
    0 3px 6px rgba(0, 0, 0, 0.16),
    0 3px 6px rgba(0, 0, 0, 0.23),
  ),
  3: (
    0 10px 20px rgba(0, 0, 0, 0.19),
    0 6px 6px rgba(0, 0, 0, 0.23),
  ),
  4: (
    0 14px 28px rgba(0, 0, 0, 0.25),
    0 10px 10px rgba(0, 0, 0, 0.22),
  ),
  5: (
    0 19px 38px rgba(0, 0, 0, 0.3),
    0 15px 12px rgba(0, 0, 0, 0.22),
  ),
) !default;

$shadows: () !default;

$all-shadows: merge($core-shadows, $shadows);
$var-shadows: variablize-map($all-shadows, 'shadow');

@function shadow($shadow) {
  @if (map.get($all-shadows, $shadow)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-shadows, $shadow);
    } @else {
      $result: map.get($all-shadows, $shadow);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--shadow-#{$shadow});
      @return $result;
    } @else {
      @error "[#{$shadow}] does not exist";
    }
  }
}

@function shadows() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-shadows;
  } @else {
    $result: $all-shadows;
  }
  @return $result;
}



// TYPOGRAPHY API
// ============================================================

$core-font-families: (
  sans: (
    sans-serif,
  ),
  serif: (
    serif,
  ),
  mono: (
    monospace,
  ),
) !default;

$font-families: () !default;

$core-font-sizes: (
  10xl: rem(72),
  9xl: rem(64),
  8xl: rem(56),
  7xl: rem(48),

  6xl: rem(40),
  5xl: rem(36),
  4xl: rem(32),
  3xl: rem(28),
  2xl: rem(24),

  xl: rem(20),
  lg: rem(18),
  md: rem(16),
  sm: rem(14),
  xs: rem(12),
  2xs: rem(10),
) !default;

$font-sizes: () !default;

$core-leadings: (
  1: 1,
  2: 1.125,
  3: 1.25,
  4: 1.375,
  5: 1.5,
  6: 1.625,
  7: 1.75,
  8: 1.875,
  9: 2,
  10: 2.125,
  11: 2.25,
  12: 2.375,
  13: 2.5,
) !default;

$leadings: () !default;

$core-trackings: (
  n5: -0.1em,
  n4: -0.08em,
  n3: -0.06em,
  n2: -0.04em,
  n1: -0.02em,
  1: 0.02em,
  2: 0.04em,
  3: 0.06em,
  4: 0.08em,
  5: 0.1em,
) !default;

$trackings: () !default;

$all-font-families: merge($core-font-families, $font-families);
$var-font-families: variablize-map($all-font-families, 'font');
$all-font-sizes: merge($core-font-sizes, $font-sizes);
$var-font-sizes: variablize-map($all-font-sizes, 'font');
$all-leadings: merge($core-leadings, $leadings);
$var-leadings: variablize-map($all-leadings, 'leading');
$all-trackings: merge($core-trackings, $trackings);
$var-trackings: variablize-map($all-trackings, 'tracking');

@function font-family($font-family) {
  @if (map.get($all-font-families, $font-family)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-font-families, $font-family);
    } @else {
      $result: map.get($all-font-families, $font-family);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--font-family-#{$font-family});
      @return $result;
    } @else {
      @error "[#{$font-family}] does not exist";
    }
  }
}

@function font-families() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-font-families;
  } @else {
    $result: $all-font-families;
  }
  @return $result;
}

@function font-size($font-size) {
  @if (map.get($all-font-sizes, $font-size)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-font-sizes, $font-size);
    } @else {
      $result: map.get($all-font-sizes, $font-size);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--font-size-#{$font-size});
      @return $result;
    } @else {
      @error "[#{$font-size}] does not exist";
    }
  }
}

@function font-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-font-sizes;
  } @else {
    $result: $all-font-sizes;
  }
  @return $result;
}

@function leading($leading) {
  @if (map.get($all-leadings, $leading)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-leadings, $leading);
    } @else {
      $result: map.get($all-leadings, $leading);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--leading-#{$leading});
      @return $result;
    } @else {
      @error "[#{$leading}] does not exist";
    }
  }
}

@function leadings() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-leadings;
  } @else {
    $result: $all-leadings;
  }
  @return $result;
}

@function tracking($tracking) {
  @if (map.get($all-trackings, $tracking)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-trackings, $tracking);
    } @else {
      $result: map.get($all-trackings, $tracking);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--tracking-#{$tracking});
      @return $result;
    } @else {
      @error "[#{$tracking}] does not exist";
    }
  }
}

@function trackings() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-trackings;
  } @else {
    $result: $all-trackings;
  }
  @return $result;
}



// CORE BORDER RADIUSES
// ============================================================

$core-radiuses: (
  xs: rem(4),
  sm: rem(8),
  md: rem(12),
  lg: rem(16),
  xl: rem(20),
  round: 9999px,
) !default;

$radiuses: () !default;
$all-radiuses: merge($core-radiuses, $radiuses);
$var-radiuses: variablize-map($all-radiuses, 'radius');

@function radius($radius) {
  @if (map.get($all-radiuses, $radius)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-radiuses, $radius);
    } @else {
      $result: map.get($all-radiuses, $radius);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--radius-#{$radius});
      @return $result;
    } @else {
      @error "[#{$radius}] does not exist";
    }
  }
}

@function radiuses() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-radiuses;
  } @else {
    $result: $all-radiuses;
  }
  @return $result;
}



// ROOT VARIABLES
// ============================================================

// Create root variables if CSS custom property setting is enabled
@if ($variablize == true) {
  @if ($headless == false) {

    :root {
      @each $key, $value in $fills {
        --#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-sizes {
        --size-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-shadows {
        --shadow-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-font-families {
        --font-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-font-sizes {
        --font-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-leadings {
        --leading-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-trackings {
        --tracking-#{'' + $key}: #{$value};
      }
      @each $key, $value in $all-radiuses {
        --radius-#{'' + $key}: #{$value};
      }
    }

  } @else if ($headless == true) {
    
    @if ($headless-with-root == true) {

      :root {
        @each $key, $value in $fills {
          --#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-sizes {
          --size-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-shadows {
          --shadow-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-font-families {
          --font-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-font-sizes {
          --font-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-leadings {
          --leading-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-trackings {
          --tracking-#{'' + $key}: #{$value};
        }
        @each $key, $value in $all-radiuses {
          --radius-#{'' + $key}: #{$value};
        }
      }

    } @else {

    }
  }
}



// CONSTRUCTOR
// ============================================================

@mixin constructor($keyword, $responsive, $responsive-pseudos, $properties, $final-variants, $pseudos) {
  @if ($headless == false) {
    @if ($debugger == true) {
      // Create basic classes
      @if $keyword == 'exempt' {
        @each $variant, $variant-value in $final-variants {
          .#{$prefix}#{'' + $variant} {
            @each $property in $properties {
              #{$property}: $variant-value if($important == true, !important, null);
            }
          }
        }
      } @else {
        @each $variant, $variant-value in $final-variants {
          @if $variant == 'exempt' {
            .#{$prefix}#{$keyword} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{$keyword} {
              &#{$delimiter}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            }
          }
        }
      }
  
      // Create basic pseudo classes
      @each $pseudo, $pseudo-value in $all-pseudo-map {
        @if $keyword == 'exempt' {
          @each $variant, $variant-value in $final-variants {
            @if $pseudo == group-hover {
              .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            } @else if $pseudo == group-focus {
              .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            } @else {
              .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                &:#{map.get($all-pseudo-map, $pseudo)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            }
          }
        } @else {
          @each $variant, $variant-value in $final-variants {
            @if $variant == 'exempt' {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  &:#{$pseudo-value} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                }
              }
            } @else {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  &#{$delimiter}#{'' + $variant} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  &#{$delimiter}#{'' + $variant} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                }
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                  &#{$delimiter}#{'' + $variant} {
                    &:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  
      // Create responsive classes
      @each $screen, $screen-value in $all-screens {
        @media (min-width: $screen-value) {
          // Create basic classes
          @if $keyword == 'exempt' {
            @each $variant, $variant-value in $final-variants {
              .#{$screen}#{$screen-delimiter}#{$prefix}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            }
          } @else {
            @each $variant, $variant-value in $final-variants {
              @if $variant == 'exempt' {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
                  &#{$delimiter}#{'' + $variant} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                }
              }
            }
          }
  
          // Create basic pseudo classes
          @each $pseudo, $pseudo-value in $all-pseudo-map {
            @if $keyword == 'exempt' {
              // Basic variant in the screen context without keyword
              @each $variant, $variant-value in $final-variants {
                @if $pseudo == group-hover {
                  .group:hover
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                } @else if $pseudo == group-focus {
                  .group:focus
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                } @else {
                  .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                    &:#{map.get($all-pseudo-map, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            } @else {
              // Pseudo variant loop in the screen context
              @each $variant, $variant-value in $final-variants {
                @if $variant == 'exempt' {
                  @if $pseudo == group-hover {
                    .group:hover
                      .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus
                      .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      &:#{$pseudo-value} {
                        @each $property in $properties {
                          #{$property}: $variant-value if($important == true, !important, null);
                        }
                      }
                    }
                  }
                } @else {
                  @if $pseudo == group-hover {
                    .group:hover
                      .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      &#{$delimiter}#{'' + $variant} {
                        @each $property in $properties {
                          #{$property}: $variant-value if($important == true, !important, null);
                        }
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus
                      .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      &#{$delimiter}#{'' + $variant} {
                        @each $property in $properties {
                          #{$property}: $variant-value if($important == true, !important, null);
                        }
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                      &#{$delimiter}#{'' + $variant} {
                        &:#{$pseudo-value} {
                          @each $property in $properties {
                            #{$property}: $variant-value if($important == true, !important, null);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } @else {
      // Create basic classes
      @if $keyword == 'exempt' {
        @each $variant, $variant-value in $final-variants {
          .#{$prefix}#{'' + $variant} {
            @each $property in $properties {
              #{$property}: $variant-value if($important == true, !important, null);
            }
          }
        }
      } @else {
        @each $variant, $variant-value in $final-variants {
          @if $variant == 'exempt' {
            .#{$prefix}#{$keyword} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{$keyword} {
              &#{$delimiter}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            }
          }
        }
      }
  
      // Create basic pseudo classes
      @each $pseudo in $pseudos {
        @if map.has-key($all-pseudo-map, $pseudo) {
          @if $keyword == 'exempt' {
            @each $variant, $variant-value in $final-variants {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{'' + $variant} {
                  &:#{map.get($all-pseudo-map, $pseudo)} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                }
              }
            }
          } @else {
            @each $variant, $variant-value in $final-variants {
              @if $variant == 'exempt' {
                @if $pseudo == group-hover {
                  .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                } @else if $pseudo == group-focus {
                  .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                } @else {
                  .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    &:#{map.get($all-pseudo-map, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              } @else {
                @if $pseudo == group-hover {
                  .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    &#{$delimiter}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                } @else if $pseudo == group-focus {
                  .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    &#{$delimiter}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                } @else {
                  .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                    &#{$delimiter}#{'' + $variant} {
                      &:#{map.get($all-pseudo-map, $pseudo)} {
                        @each $property in $properties {
                          #{$property}: $variant-value if($important == true, !important, null);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  
      // Create responsive classes
      @if $responsive == true {
        @each $screen, $screen-value in $all-screens {
          @media (min-width: $screen-value) {
            // Create basic classes
            @if $keyword == 'exempt' {
              @each $variant, $variant-value in $final-variants {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            } @else {
              @each $variant, $variant-value in $final-variants {
                @if $variant == 'exempt' {
                  .#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
                    @each $property in $properties {
                      #{$property}: $variant-value if($important == true, !important, null);
                    }
                  }
                } @else {
                  .#{$screen}#{$screen-delimiter}#{$prefix}#{$keyword} {
                    &#{$delimiter}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
  
            @if $responsive-pseudos == true {
              // Create basic pseudo classes
              @each $pseudo in $pseudos {
                @if map.has-key($all-pseudo-map, $pseudo) {
                  @if $keyword == 'exempt' {
                    // Basic variant in the screen context without keyword
                    @each $variant, $variant-value in $final-variants {
                      @if $pseudo == group-hover {
                        .group:hover
                          .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
                          + $variant} {
                          @each $property in $properties {
                            #{$property}: $variant-value if($important == true, !important, null);
                          }
                        }
                      } @else if $pseudo == group-focus {
                        .group:focus
                          .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
                          + $variant} {
                          @each $property in $properties {
                            #{$property}: $variant-value if($important == true, !important, null);
                          }
                        }
                      } @else {
                        .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{''
                          + $variant} {
                          &:#{map.get($all-pseudo-map, $pseudo)} {
                            @each $property in $properties {
                              #{$property}: $variant-value if($important == true, !important, null);
                            }
                          }
                        }
                      }
                    }
                  } @else {
                    // Pseudo variant loop in the screen context
                    @each $variant, $variant-value in $final-variants {
                      @if $variant == 'exempt' {
                        @if $pseudo == group-hover {
                          .group:hover
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            @each $property in $properties {
                              #{$property}: $variant-value if($important == true, !important, null);
                            }
                          }
                        } @else if $pseudo == group-focus {
                          .group:focus
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            @each $property in $properties {
                              #{$property}: $variant-value if($important == true, !important, null);
                            }
                          }
                        } @else {
                          .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            &:#{map.get($all-pseudo-map, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      } @else {
                        @if $pseudo == group-hover {
                          .group:hover
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            &#{$delimiter}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        } @else if $pseudo == group-focus {
                          .group:hover
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            &#{$delimiter}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        } @else {
                          .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{$keyword} {
                            &#{$delimiter}#{'' + $variant} {
                              &:#{map.get($all-pseudo-map, $pseudo)} {
                                @each $property in $properties {
                                  #{$property}: $variant-value
                                    if($important == true, !important, null);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
